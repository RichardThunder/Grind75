### 方法，使用有序映射维护区间

**解题思路**

假设用某一数据结构维护这些不相交的区间，在设计具体的数据结构之前，需要先明确 $\texttt{void addNum(int val)}$ 这一操作会使得当前的区间集合发生何种变化：

- 情况一：如果存在一个区间 $[l, r]$，它完全包含 $\textit{val}$，即 $l \leq \textit{val} \leq r$，那么在加入 $\textit{val}$ 之后，区间集合不会有任何变化；

- 情况二：如果存在一个区间 $[l, r]$，它的右边界 $r$「紧贴着」$\textit{val}$，即 $r + 1 = \textit{val}$，那么在加入 $\textit{val}$ 之后，该区间会从 $[l, r]$ 变为 $[l, r+1]$；

- 情况三：如果存在一个区间 $[l, r]$，它的左边界 $l$「紧贴着」$\textit{val}$，即 $l - 1 = \textit{val}$，那么在加入 $\textit{val}$ 之后，该区间会从 $[l, r]$ 变为 $[l - 1, r]$；

- 情况四：如果情况二和情况三同时满足，即存在一个区间 $[l_0, r_0]$ 满足 $r_0+1 = \textit{val}$，并且存在一个区间 $[l_1, r_1]$ 满足 $l_1-1 = \textit{val}$，那么在加入 $\textit{val}$ 之后，这两个区间会合并成一个大区间 $[l_0, r_1]$；

- 情况五：在上述四种情况均不满足的情况下，$\textit{val}$ 会单独形成一个新的区间 $[\textit{val}, \textit{val}]$。

根据上面的五种情况，需要找到离 $\textit{val}$ 最近的两个区间。用严谨的语言可以表述为：

- 对于给定的 $\textit{val}$，需要找到区间 $[l_0, r_0]$，使得 $l_0$ 是最大的满足 $l_0 \leq \textit{val}$ 的区间。同时，需要找到区间 $[l_1, r_1]$，使得 $l_1$ 是最小的满足 $l_1 > \textit{val}$ 的区间。

如果这种数据结构能够快速找到这两个区间，那么上面的五种情况分别对应为：

- 情况一：$l_0 \leq \textit{val} \leq l_1$；

- 情况二：$r_0 + 1 = \textit{val}$；

- 情况三：$l_1 - 1 = \textit{val}$；

- 情况四：$r_0 + 1 = \textit{val}$ 并且 $l_1 - 1 = \textit{val}$；

- 情况五：上述情况均不满足。

一种可以找到「最近」区间的数据结构是有序映射。有序映射中的键和值分别表示区间的左边界 $l$ 和右边界 $r$。由于有序映射支持查询「最大的比某个元素小的键」以及「最小的比某个元素大的键」这两个操作，因此可以快速地定位区间 $[l_0, r_0]$ 和 $[l_1, r_1]$。

除此之外，对于 $\texttt{int[][] getIntervals()}$ 操作，只需要对有序映射进行遍历，将所有的键值对返回即可。

**细节**

在实际的代码编写中，需要注意 $[l_0, r_0]$ 或 $[l_1, r_1]$ 不存在的情况。

[参考](https://leetcode.cn/problems/data-stream-as-disjoint-intervals/solutions/1037200/jiang-shu-ju-liu-bian-wei-duo-ge-bu-xian-hm1r/)

### 代码

* []

```Java
class SummaryRanges {
    TreeMap<Integer, Integer> intervals;

    public SummaryRanges() {
        this.intervals = new TreeMap<>();
    }
    
    public void addNum(int value) {
        // 找到 l1 最小的且满足 l1 > val 的区间 interval1 = [l1, r1]
        // 如果不存在这样的区间，interval1 为尾迭代器
        Map.Entry<Integer, Integer> interval1 = intervals.ceilingEntry(value + 1);
        // 找到 l0 最大的且满足 l0 <= val 的区间 interval0 = [l0, r0]
        // 在有序集合中，interval0 就是 interval1 的前一个区间
        // 如果不存在这样的区间，interval0 为尾迭代器
        Map.Entry<Integer, Integer> interval0 = intervals.floorEntry(value);
        if (interval0 != null && interval0.getKey() <= value && value <= interval0.getValue()) {
            // 情况一
            return;
        }
        boolean leftAside = interval0 != null && interval0.getValue() + 1 == value;
        boolean rightAside = interval1 != null && interval1.getKey() - 1 == value;
        if (leftAside && rightAside) {
            // 情况四
            int left = interval0.getKey();
            int right = interval1.getValue();
            intervals.remove(interval0.getKey());
            intervals.remove(interval1.getKey());
            intervals.put(left, right);
        } else if (leftAside) {
            // 情况二
            intervals.put(interval0.getKey(), value);
        } else if (rightAside) {
            // 情况三
            int right = interval1.getValue();
            intervals.remove(interval1.getKey());
            intervals.put(value, right);
        } else {
            // 情况五
            intervals.put(value, value);
        }
    }
    
    public int[][] getIntervals() {
        int n = intervals.size();
        int[][] ret = new int[n][2];
        int i = 0;
        for (Map.Entry<Integer, Integer> entry : intervals.entrySet()) {
            ret[i][0] = entry.getKey();
            ret[i][1] = entry.getValue();
            ++i;
        }
        return ret;
    }
}
```

**复杂度分析**

- 时间复杂度：

  - $\texttt{void addNum(int val)}$ 的时间复杂度为 $O(\log n)$，即为对有序映射进行常数次添加、删除、修改操作需要的时间。

  - $\texttt{int[][] getIntervals()}$ 的时间复杂度为 $O(n)$，即为对有序映射进行一次遍历需要的时间。
- 空间复杂度：$O(n)$。在最坏情况下，数据流中的 $n$ 个元素分别独自形成一个区间，有序映射中包含 $n$ 个键值对。

